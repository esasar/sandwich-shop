# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

version: "3"

services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.

  # The server-a service
  server-a:
    # Change the image information to match your server A image
    # image: crazepiano/node-swagger:3a # $USERNAME/$IMAGENAME:$TAG, something like group000/node-swagger:3a

    # Service dependencies
    depends_on:
      - rapid-runner-rabbit
    # Override the command to run the server
    command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
    # Configuration options applied at build time
    build:
      # Name of the Dockerfile (not really necesarry when default name)
      dockerfile: Dockerfile
      # Path to the directory containing the Dockerfile
      context: ./backend/server-a
    # Expose ports HOST:CONTAINER
    ports:
      - 8080:8080
    # Expose the port to the backend network
    networks:
      - backend
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/

  # The RabbitMQ service
  rapid-runner-rabbit:
    # Use the official RabbitMQ image with management plugin
    image: rabbitmq:3-management
    # Expose ports HOST:CONTAINER
    ports:
      - 5672:5672
      - 15672:15672
    # Expose the port to the backend network
    expose:
      - 5672
    # Expose the port to the backend network
    networks:
      - backend

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  server-b:
    # image:
    depends_on:
      - rapid-runner-rabbit
    command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
    build:
      dockerfile: Dockerfile
      context: ./backend/server-b
    expose:
      - 8081
    networks:
      - backend

  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases
  # database-service would go here.
  database:
    image: mongo:latest
    ports: 
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb:/data/db
    networks:
      - backend

  # Frontend service
  frontend:
    # Configuration options applied at build time 
    build:
      # Name of the Dockerfile (not really necesarry when default name)
      dockerfile: Dockerfile
      # Path to the directory containing the Dockerfile
      context: ./frontend
    # Expose ports HOST:CONTAINER
    ports:
      - 5173:5173
    # Service dependencies
    depends_on:
      - server-a

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
volumes:
  mongodb:
